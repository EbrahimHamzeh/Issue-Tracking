{"version":3,"sources":["webpack:///./node_modules/jwt-decode/lib/atob.js","webpack:///./node_modules/jwt-decode/lib/base64_url_decode.js","webpack:///./node_modules/jwt-decode/lib/index.js","webpack:///./src/app/authentication/access-denied/access-denied.component.html","webpack:///./src/app/authentication/login/login.component.html","webpack:///./src/app/authentication/access-denied/access-denied.component.css","webpack:///./src/app/authentication/access-denied/access-denied.component.ts","webpack:///./src/app/authentication/authentication-layout.component.ts","webpack:///./src/app/authentication/authentication-routing.module.ts","webpack:///./src/app/authentication/authentication.module.ts","webpack:///./src/app/authentication/login/login.component.css","webpack:///./src/app/authentication/login/login.component.ts","webpack:///./src/app/core/models/auth-token-type.ts","webpack:///./src/app/core/services/auth.service.ts","webpack:///./src/app/core/services/browser-storage.service.ts","webpack:///./src/app/core/services/refresh-token.service.ts","webpack:///./src/app/core/services/token-store.service.ts","webpack:///./src/app/core/services/utils.service.ts"],"names":[],"mappings":"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","file":"authentication-authentication-module.js","sourcesContent":["/**\n * The code was extracted from:\n * https://github.com/davidchambers/Base64.js\n */\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction InvalidCharacterError(message) {\n  this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\nfunction polyfill (input) {\n  var str = String(input).replace(/=+$/, '');\n  if (str.length % 4 == 1) {\n    throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n  }\n  for (\n    // initialize result and counters\n    var bc = 0, bs, buffer, idx = 0, output = '';\n    // get next character\n    buffer = str.charAt(idx++);\n    // character found in table? initialize bit storage and add its ascii value;\n    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n      // and if not first of each 4 characters,\n      // convert the first 8 bits to one ascii character\n      bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n  ) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = chars.indexOf(buffer);\n  }\n  return output;\n}\n\n\nmodule.exports = typeof window !== 'undefined' && window.atob && window.atob.bind(window) || polyfill;\n","var atob = require('./atob');\n\nfunction b64DecodeUnicode(str) {\n  return decodeURIComponent(atob(str).replace(/(.)/g, function (m, p) {\n    var code = p.charCodeAt(0).toString(16).toUpperCase();\n    if (code.length < 2) {\n      code = '0' + code;\n    }\n    return '%' + code;\n  }));\n}\n\nmodule.exports = function(str) {\n  var output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  switch (output.length % 4) {\n    case 0:\n      break;\n    case 2:\n      output += \"==\";\n      break;\n    case 3:\n      output += \"=\";\n      break;\n    default:\n      throw \"Illegal base64url string!\";\n  }\n\n  try{\n    return b64DecodeUnicode(output);\n  } catch (err) {\n    return atob(output);\n  }\n};\n","'use strict';\n\nvar base64_url_decode = require('./base64_url_decode');\n\nfunction InvalidTokenError(message) {\n  this.message = message;\n}\n\nInvalidTokenError.prototype = new Error();\nInvalidTokenError.prototype.name = 'InvalidTokenError';\n\nmodule.exports = function (token,options) {\n  if (typeof token !== 'string') {\n    throw new InvalidTokenError('Invalid token specified');\n  }\n\n  options = options || {};\n  var pos = options.header === true ? 0 : 1;\n  try {\n    return JSON.parse(base64_url_decode(token.split('.')[pos]));\n  } catch (e) {\n    throw new InvalidTokenError('Invalid token specified: ' + e.message);\n  }\n};\n\nmodule.exports.InvalidTokenError = InvalidTokenError;\n","module.exports = \"<p>\\n  access-denied works!\\n</p>\\n\"","module.exports = \"<!-- <mat-toolbar dir=rtl color=\\\"primary\\\" style=\\\"height: 100vh;\\\">سیستم پشتیبانی</mat-toolbar>\\n<div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"login-main\\\">\\n    <mat-card dir=rtl>\\n        <mat-card-header>\\n            <mat-card-title>ورود</mat-card-title>\\n        </mat-card-header>\\n        <form (ngSubmit)=\\\"onSubmit(form)\\\" #form=\\\"ngForm\\\"> \\n            <mat-card-content fxLayout=\\\"column\\\">\\n                <mat-form-field>\\n                    <input matInput placeholder=\\\"نام‌کاربری\\\" #username=\\\"ngModel\\\" required [(ngModel)]=\\\"model.username\\\">\\n                    <mat-error *ngIf=\\\"username.invalid && username.touched\\\">نام‌کاربری نا معتبر می‌باشد.</mat-error>\\n                </mat-form-field>\\n                <mat-form-field>\\n                    <input type=\\\"password\\\" matInput placeholder=\\\"رمزعبور\\\" #password=\\\"ngModel\\\" required [(ngModel)]=\\\"model.password\\\">\\n                    <mat-error *ngIf=\\\"password.invalid && password.touched\\\">رمزعبور نا معتبر می‌باشد.</mat-error>\\n                </mat-form-field>\\n                <mat-form-field>\\n                     <input type=\\\"checkbox\\\"  #rememberMe=\\\"ngModel\\\" matInput [(ngModel)]=\\\"model.rememberMe\\\">مرا به ‌خاطر بسپار \\n                     <mat-checkbox #rememberMe=\\\"ngModel\\\" matInput [(ngModel)]=\\\"model.rememberMe\\\"></mat-checkbox>\\n                 </mat-form-field> \\n            </mat-card-content>\\n            <mat-card-actions>\\n                <button type=\\\"submit\\\" mat-raised-button color=\\\"primary\\\" [disabled]=\\\"form.invalid \\\">ورود</button>\\n            </mat-card-actions>\\n        </form>\\n    </mat-card>\\n</div> -->\\n\\n<mat-toolbar color=\\\"primary\\\">\\n    <span>سیستم پشتیبانی</span>\\n</mat-toolbar>\\n<div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"login-main\\\">\\n    <mat-card class=\\\"my-card\\\">\\n        <mat-card-header>\\n            <mat-card-title>ورود</mat-card-title>\\n        </mat-card-header>\\n        <form (ngSubmit)=\\\"onSubmit(form)\\\" #form=\\\"ngForm\\\">\\n            <mat-card-content fxLayout=\\\"column\\\" dir=\\\"rtl\\\">\\n                <mat-form-field>\\n                    <input matInput placeholder=\\\"نام‌کاربری\\\" name=\\\"username\\\" #username=\\\"ngModel\\\" required\\n                        [(ngModel)]=\\\"model.username\\\">\\n                    <mat-error *ngIf=\\\"username.invalid && username.touched\\\">نام‌کاربری نامعتبر می‌باشد.</mat-error>\\n                </mat-form-field>\\n                <mat-form-field>\\n                    <input type=\\\"password\\\" matInput placeholder=\\\"رمزعبور\\\" name=\\\"password\\\" #password=\\\"ngModel\\\" required\\n                        [(ngModel)]=\\\"model.password\\\">\\n                    <mat-error *ngIf=\\\"password.invalid && password.touched\\\">رمزعبور نامعتبر می‌باشد.</mat-error>\\n                </mat-form-field>\\n                 <!-- <mat-form-field> -->\\n                     <!-- <input type=\\\"checkbox\\\" matInput name=\\\"rememberMe\\\" #rememberMe=\\\"ngModel\\\" matInput [(ngModel)]=\\\"model.rememberMe\\\">مرا به ‌خاطر بسپار  -->\\n                     <mat-checkbox #rememberMe=\\\"ngModel\\\" name=\\\"rememberMe\\\" [(ngModel)]=\\\"model.rememberMe\\\">مرا به ‌خاطر بسپار</mat-checkbox>\\n                <!-- </mat-form-field> -->\\n            </mat-card-content>\\n            <mat-card-actions>\\n                <button type=\\\"submit\\\" mat-raised-button [disabled]=\\\"form.invalid \\\" color=\\\"primary\\\">ورود</button>\\n            </mat-card-actions>\\n        </form>\\n    </mat-card>\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGhlbnRpY2F0aW9uL2FjY2Vzcy1kZW5pZWQvYWNjZXNzLWRlbmllZC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-access-denied',\n  templateUrl: './access-denied.component.html',\n  styleUrls: ['./access-denied.component.css']\n})\nexport class AccessDeniedComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-authentication-layout',\n  template: '<router-outlet></router-outlet>'\n})\nexport class AuthenticationLayoutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AuthenticationLayoutComponent } from './authentication-layout.component';\nimport { LoginComponent } from './login/login.component';\n\nconst routes: Routes = [\n  {\n    path: 'user',\n    component: AuthenticationLayoutComponent,\n    children: [\n      { path: 'login', component: LoginComponent, pathMatch: 'full' }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthenticationRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthenticationRoutingModule } from './authentication-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { AuthenticationLayoutComponent } from './authentication-layout.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { AccessDeniedComponent } from './access-denied/access-denied.component';\n\n@NgModule({\n  declarations: [LoginComponent, AuthenticationLayoutComponent, AccessDeniedComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    AuthenticationRoutingModule\n  ]\n})\nexport class AuthenticationModule { }\n","module.exports = \".spacer {\\r\\n  flex: 1 1 auto;\\r\\n}\\r\\n  \\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXV0aGVudGljYXRpb24vbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGNBQWM7QUFDaEIiLCJmaWxlIjoic3JjL2FwcC9hdXRoZW50aWNhdGlvbi9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnNwYWNlciB7XHJcbiAgZmxleDogMSAxIGF1dG87XHJcbn1cclxuICAiXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { Credentials } from 'src/app/core/models/credentials';\nimport { AuthService } from 'src/app/core/services/auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { NgForm } from '@angular/forms';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  model: Credentials = { username: '', password: '', rememberMe: false };\n  error = '';\n  returnUrl: string | null = null;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit() {\n    this.authService.logout(false);\n\n    // tslint:disable-next-line:no-string-literal\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'];\n  }\n\n  onSubmit(form: NgForm) {\n    console.log(form);\n\n    this.error = '';\n    this.authService.login(this.model)\n      .subscribe(isLoggedIn => {\n        if (isLoggedIn) {\n          if (this.returnUrl) {\n            this.router.navigate([this.returnUrl]);\n          } else {\n            this.router.navigate(['/dashboard/panel/list']);\n          }\n        }\n      },\n        (error: HttpErrorResponse) => {\n          console.error('Login error', error);\n          if (error.status === 401) {\n            this.error = 'Invalid User name or Password. Please try again.';\n          } else {\n            this.error = `${error.statusText}: ${error.message}`;\n          }\n        });\n  }\n\n}\n","export enum AuthTokenType {\n  AccessToken,\n  RefreshToken\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { catchError, finalize, map } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { APP_CONFIG, IAppConfig } from './app.config';\nimport { ApiConfigService } from './api-config.service';\nimport { TokenStoreService } from './token-store.service';\nimport { Credentials } from '../models/credentials';\nimport { AuthUser } from '../models/auth-user';\nimport { RefreshTokenService } from './refresh-token.service';\nimport { AuthTokenType } from '../models/auth-token-type';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private authStatusSource = new BehaviorSubject<boolean>(false);\n  authStatus$ = this.authStatusSource.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    @Inject(APP_CONFIG) private appConfig: IAppConfig,\n    private apiConfigService: ApiConfigService,\n    private tokenStoreService: TokenStoreService,\n    private refreshTokenService: RefreshTokenService\n  ) { }\n\n  login(credentials: Credentials): Observable<boolean> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    return this.http\n      .post(`${this.appConfig.apiEndpoint}/${this.apiConfigService.configuration.loginPath}`,\n        credentials, { headers })\n      .pipe(\n        map((response: any) => {\n          this.tokenStoreService.setRememberMe(credentials.rememberMe);\n          if (!response) {\n            console.error('There is no `{\\'' + this.apiConfigService.configuration.accessTokenObjectKey +\n              '\\':\\'...\\',\\'' + this.apiConfigService.configuration.refreshTokenObjectKey + '\\':\\'...value...\\'}` response after login.');\n            this.authStatusSource.next(false);\n            return false;\n          }\n          this.tokenStoreService.storeLoginSession(response);\n          console.log('Logged-in user info', this.getAuthUser);\n          this.refreshTokenService.scheduleRefreshtoken(true, true);\n          this.authStatusSource.next(true);\n          return true;\n        }),\n        catchError((error: HttpErrorResponse) => throwError(error))\n      );\n  }\n\n  logout(navigateToHome: boolean): void {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    const refreshToken = encodeURIComponent(this.tokenStoreService.getRawAuthToken(AuthTokenType.RefreshToken));\n\n    this.http\n      .get(`${this.appConfig.apiEndpoint}/${this.apiConfigService.configuration.logoutPath}?refreshToken=${refreshToken}`,\n        { headers })\n      .pipe(\n        map(response => response || {}),\n        catchError((error: HttpErrorResponse) => throwError(error)),\n        finalize(() => {\n          this.tokenStoreService.deleteAuthTokens();\n          this.refreshTokenService.unscheduleRefreshtoken(true);\n          this.authStatusSource.next(false);\n          if (navigateToHome) {\n            this.router.navigate(['/']);\n          }\n        })\n      )\n      .subscribe(result => {\n        console.log('logout', result);\n      });\n  }\n\n  isAuthUserLoggedIn(): boolean {\n    return this.tokenStoreService.hasStoredAccessAndRefreshTokens() &&\n      !this.tokenStoreService.isAccessTokenExpired();\n  }\n\n  getAuthUser(): AuthUser | null {\n    if (!this.isAuthUserLoggedIn()) {\n      return null;\n    }\n\n    const decodedToken = this.tokenStoreService.getDecodedAccessToken();\n    const roles = this.tokenStoreService.getDecodedTokenRoles();\n    return Object.freeze({\n      userId: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier'],\n      userName: decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name'],\n      displayName: decodedToken.DisplayName,\n      roles\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BrowserStorageService {\n  getSession(key: string): any {\n    const data = window.sessionStorage.getItem(key);\n    if (data) {\n      return JSON.parse(data);\n    } else {\n      return null;\n    }\n  }\n\n  setSession(key: string, value: any): void {\n    const data = value === undefined ? '' : JSON.stringify(value);\n    window.sessionStorage.setItem(key, data);\n  }\n\n  removeSession(key: string): void {\n    window.sessionStorage.removeItem(key);\n  }\n\n  removeAllSessions(): void {\n    for (const key in window.sessionStorage) {\n      if (window.sessionStorage.hasOwnProperty(key)) {\n        this.removeSession(key);\n      }\n    }\n  }\n\n  getLocal(key: string): any {\n    const data = window.localStorage.getItem(key);\n    if (data) {\n      return JSON.parse(data);\n    } else {\n      return null;\n    }\n  }\n\n  setLocal(key: string, value: any): void {\n    const data = value === undefined ? '' : JSON.stringify(value);\n    window.localStorage.setItem(key, data);\n  }\n\n  removeLocal(key: string): void {\n    window.localStorage.removeItem(key);\n  }\n\n  removeAllLocals(): void {\n    for (const key in window.localStorage) {\n      if (window.localStorage.hasOwnProperty(key)) {\n        this.removeLocal(key);\n      }\n    }\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Subscription, throwError, timer } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\n\nimport { TokenStoreService } from './token-store.service';\nimport { APP_CONFIG, IAppConfig } from './app.config';\nimport { ApiConfigService } from './api-config.service';\nimport { BrowserStorageService } from './browser-storage.service';\nimport { UtilsService } from './utils.service';\nimport { AuthTokenType } from '../models/auth-token-type';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RefreshTokenService {\n\n  private refreshTokenTimerCheckId = 'is_refreshToken_timer_started';\n  private refreshTokenSubscription: Subscription | null = null;\n\n  constructor(\n    private tokenStorageService: TokenStoreService,\n    @Inject(APP_CONFIG) private appConfig: IAppConfig,\n    private apiConfigService: ApiConfigService,\n    private http: HttpClient,\n    private browserStorageService: BrowserStorageService,\n    private utilsService: UtilsService\n  ) { }\n\n  scheduleRefreshtoken(isAuthUserLoggedIn: boolean, calledFromLogin: boolean) {\n    this.unscheduleRefreshtoken(false);\n\n    if (!isAuthUserLoggedIn) {\n      return;\n    }\n\n    const expDateUtc = this.tokenStorageService.getAccessTokenExpirationDateUtc();\n    if (!expDateUtc) {\n      throw new Error('This access token has not the \"exp\" property.');\n    }\n\n    const expiresAtUtc = expDateUtc.valueOf();\n    const nowUtc = new Date().valueOf();\n    const threeSeconds = 3000;\n\n    const initialDelay = Math.max(threeSeconds, expiresAtUtc - nowUtc - threeSeconds);\n    console.log('Initial scheduleRefreshToken Delay(ms)', initialDelay);\n    const timerSource$ = timer(initialDelay);\n    this.refreshTokenSubscription = timerSource$.subscribe(() => {\n      if (calledFromLogin) {\n        this.refreshToken(isAuthUserLoggedIn);\n      } else {\n        this.scheduleRefreshtoken(isAuthUserLoggedIn, false);\n      }\n    });\n\n    if (calledFromLogin) {\n      this.setRefreshTokenTimerStarted();\n    }\n  }\n\n  private setRefreshTokenTimerStarted(): void {\n    this.browserStorageService.setLocal(this.refreshTokenTimerCheckId,\n      { isStarted: true }\n    );\n  }\n\n  unscheduleRefreshtoken(cancelTimerCheckToken: boolean) {\n    if (this.refreshTokenSubscription) {\n      this.refreshTokenSubscription.unsubscribe();\n    }\n\n    if (cancelTimerCheckToken) {\n      this.deleteRefreshTokenTimerCheckId();\n    }\n  }\n\n  private refreshToken(isAuthUserLoggedIn: boolean) {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    const model = { refreshToken: this.tokenStorageService.getRawAuthToken(AuthTokenType.RefreshToken) };\n    return this.http\n      .post(`${this.appConfig.apiEndpoint}/${this.apiConfigService.configuration.refreshTokenPath}`,\n        model, { headers })\n      .pipe(\n        map(response => response || {}),\n        catchError((error: HttpErrorResponse) => throwError(error)))\n      .subscribe(result => {\n        console.log('RefreshToken Result', result);\n        this.tokenStorageService.storeLoginSession(result);\n        this.scheduleRefreshtoken(isAuthUserLoggedIn, false);\n      });\n  }\n\n  private deleteRefreshTokenTimerCheckId() {\n    this.browserStorageService.removeLocal(this.refreshTokenTimerCheckId);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport * as jwt_decode from 'jwt-decode';\n\nimport { BrowserStorageService } from './browser-storage.service';\nimport { ApiConfigService } from './api-config.service';\nimport { AuthTokenType } from '../models/auth-token-type';\nimport { UtilsService } from './utils.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenStoreService {\n\n  private rememberMeToken = 'rememberMe_token';\n\n  constructor(\n    private browserStorageService: BrowserStorageService,\n    private utilsService: UtilsService,\n    private apiConfigService: ApiConfigService\n  ) { }\n\n  // برای بیرون کشیدن اطلاعات توکن از حافطه مرورگر\n  getRawAuthToken(tokenType: AuthTokenType): string {\n    if (this.rememberMe()) {\n      return this.browserStorageService.getLocal(AuthTokenType[tokenType]);\n    } else {\n      return this.browserStorageService.getSession(AuthTokenType[tokenType]);\n    }\n  }\n\n  // برای دیکد کردن اطلاعات توکن ارسالی از سرور\n  getDecodedAccessToken(): any {\n    return jwt_decode(this.getRawAuthToken(AuthTokenType.AccessToken));\n  }\n\n  // نمایش نام نمایشی کاربر\n  getAuthUserDisplayName(): string {\n    return this.getDecodedAccessToken().DisplayName;\n  }\n\n  // تشخیص تاریخ از بین رفتن اعتبار توکن\n  getAccessTokenExpirationDateUtc(): Date | null {\n    const decode = this.getDecodedAccessToken();\n    if (decode.exp === undefined) {\n      return null;\n    }\n    const date = new Date(0); // The 0 sets the date to the epoch\n    date.setUTCSeconds(decode.exp);\n    return date;\n  }\n\n  // اگر اعتبار توکن تموم شده باشه boolean  برمیگردونه\n  isAccessTokenExpired(): boolean {\n    const expirationDateUtc = this.getAccessTokenExpirationDateUtc();\n    if (!expirationDateUtc) {\n      return true;\n    }\n\n    return !(expirationDateUtc.valueOf() > new Date().valueOf());\n  }\n\n  // ثبت توکن برای اساس مرابه خاطربسپار\n  setToken(tokenType: AuthTokenType, tokenValue: string): void {\n    if (this.utilsService.isEmptyString(tokenValue)) {\n      console.error(`${AuthTokenType[tokenType]} is null or empty.`);\n    }\n\n    if (tokenType === AuthTokenType.AccessToken && this.utilsService.isEmptyString(tokenValue)) {\n      throw new Error('AccessToken can\\'t be null or empty.');\n    }\n\n    if (this.rememberMe()) {\n      this.browserStorageService.setLocal(AuthTokenType[tokenType], tokenValue);\n    } else {\n      this.browserStorageService.setSession(AuthTokenType[tokenType], tokenValue);\n    }\n  }\n\n  getDecodedTokenRoles(): string[] | null {\n    const decodedToken = this.getDecodedAccessToken();\n    const roles = decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];\n    if (!roles) {\n      return null;\n    }\n\n    if (Array.isArray(roles)) {\n      return roles.map(role => role.toLowerCase());\n    } else {\n      return [roles.toLowerCase()];\n    }\n  }\n\n  // ذخیره توکن ها\n  storeLoginSession(response: any): void {\n    this.setToken(AuthTokenType.AccessToken, response[this.apiConfigService.configuration.accessTokenObjectKey]);\n    this.setToken(AuthTokenType.RefreshToken, response[this.apiConfigService.configuration.refreshTokenObjectKey]);\n  }\n\n  // حذف توکن های اعتبار سنجی\n  deleteAuthTokens() {\n    if (this.rememberMe()) {\n      this.browserStorageService.removeLocal(AuthTokenType[AuthTokenType.AccessToken]);\n      this.browserStorageService.removeLocal(AuthTokenType[AuthTokenType.RefreshToken]);\n    } else {\n      this.browserStorageService.removeSession(AuthTokenType[AuthTokenType.AccessToken]);\n      this.browserStorageService.removeSession(AuthTokenType[AuthTokenType.RefreshToken]);\n    }\n    this.browserStorageService.removeLocal(this.rememberMeToken);\n  }\n\n  // آیا گزینه مرا به خاطر بسپار را کاربر انتخاب کرده است؟\n  rememberMe(): boolean {\n    return this.browserStorageService.getLocal(this.rememberMeToken) === true;\n  }\n\n  // مقدار دهی مرا به خاطر بسپار\n  setRememberMe(value: boolean): void {\n    this.browserStorageService.setLocal(this.rememberMeToken, value);\n  }\n\n  // آیا مقدار توکنها ذخیره شده است؟\n  hasStoredAccessAndRefreshTokens(): boolean {\n    const accessToken = this.getRawAuthToken(AuthTokenType.AccessToken);\n    const refreshToken = this.getRawAuthToken(AuthTokenType.RefreshToken);\n\n    return !this.utilsService.isEmptyString(accessToken) && !this.utilsService.isEmptyString(refreshToken);\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtilsService {\n\n  constructor() { }\n\n  isEmptyString(value: string): boolean {\n    return !value || 0 === value.length;\n  }\n}\n"],"sourceRoot":""}